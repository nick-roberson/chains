/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HTTPValidationError,
  QueryResponse,
  UpdateResponse,
} from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  QueryResponseFromJSON,
  QueryResponseToJSON,
  UpdateResponseFromJSON,
  UpdateResponseToJSON,
} from "../models/index";

export interface QueryQueryPostRequest {
  prompt: string;
}

export interface ReloadReloadPostRequest {
  testPrompt?: string;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Health endpoint.
   * Health
   */
  async healthHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/health`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Health endpoint.
   * Health
   */
  async healthHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.healthHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Query the index.
   * Query
   */
  async queryQueryPostRaw(
    requestParameters: QueryQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<QueryResponse>> {
    if (
      requestParameters.prompt === null ||
      requestParameters.prompt === undefined
    ) {
      throw new runtime.RequiredError(
        "prompt",
        "Required parameter requestParameters.prompt was null or undefined when calling queryQueryPost.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.prompt !== undefined) {
      queryParameters["prompt"] = requestParameters.prompt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/query`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QueryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Query the index.
   * Query
   */
  async queryQueryPost(
    requestParameters: QueryQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<QueryResponse> {
    const response = await this.queryQueryPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Root endpoint.
   * Read Root
   */
  async readRootGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Root endpoint.
   * Read Root
   */
  async readRootGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.readRootGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Reload the index.
   * Reload
   */
  async reloadReloadPostRaw(
    requestParameters: ReloadReloadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateResponse>> {
    const queryParameters: any = {};

    if (requestParameters.testPrompt !== undefined) {
      queryParameters["test_prompt"] = requestParameters.testPrompt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/reload`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateResponseFromJSON(jsonValue),
    );
  }

  /**
   * Reload the index.
   * Reload
   */
  async reloadReloadPost(
    requestParameters: ReloadReloadPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateResponse> {
    const response = await this.reloadReloadPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
